"""
This script processes image and video files in year-based directories,
setting their modification dates based on EXIF data or filename patterns.
It uses multi-threading for efficient processing and provides progress updates.

Generated by Claude 3.5 Sonnet.
"""

import os
import re
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor
from PIL import Image
import time

def extract_date_from_filename(filename):
    patterns = [
        r'IMG_(\d{4})(\d{2})(\d{2})_',
        r'AR_EFFECT_(\d{4})(\d{2})(\d{2})',
        r'IMG_(\d{4})_(\d{2})(\d{2})_',
        r'VID(\d{4})(\d{2})(\d{2})',
        r'video_(\d{4})(\d{2})(\d{2})',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, filename)
        if match:
            return datetime(int(match.group(1)), int(match.group(2)), int(match.group(3)))
    
    return None

def get_exif_date(file_path):
    try:
        with Image.open(file_path) as img:
            exif_data = img._getexif()
            if exif_data:
                date_str = exif_data.get(36867)  # 36867 is the tag for DateTimeOriginal
                if date_str:
                    return datetime.strptime(date_str, '%Y:%m:%d %H:%M:%S')
    except Exception:
        pass
    return None

def process_file(file_path):
    filename = os.path.basename(file_path)
    dir_name = os.path.basename(os.path.dirname(file_path))
    year = int(dir_name.split()[-1])
    
    # Try to get date from EXIF data (for images)
    date = get_exif_date(file_path)
    
    # If no EXIF date, try to extract from filename
    if not date:
        date = extract_date_from_filename(filename)
    
    # If still no date, use January 1st of the directory year
    if not date:
        date = datetime(year, 1, 1)
    
    # Set the file's modification time
    mtime = time.mktime(date.timetuple())
    os.utime(file_path, (mtime, mtime))
    
    return f"Processed: {file_path} - Date set to: {date.strftime('%Y-%m-%d')}"

def process_directory(directory):
    files = []
    for root, _, filenames in os.walk(directory):
        for filename in filenames:
            if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.mp4', '.webp', 'webmp')):
                files.append(os.path.join(root, filename))
    
    total_files = len(files)
    processed_files = 0
    
    with ThreadPoolExecutor(max_workers=8) as executor:
        for result in executor.map(process_file, files):
            processed_files += 1
            print(f"{result} - Progress: {processed_files}/{total_files}")

if __name__ == "__main__":
    for year in range(2010, 2025):
        directory = f"Photos from {year}"
        if os.path.exists(directory):
            print(f"Processing directory: {directory}")
            process_directory(directory)
        else:
            print(f"Directory not found: {directory}")
